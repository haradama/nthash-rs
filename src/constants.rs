//! Central **lookup tables & numeric constants** shared by every ntHash variant
//! in this crate (`NtHash`, `BlindNtHash`, `SeedNtHash`, …).
//!
//! This module is a byte‐for‐byte port of the official C++ reference
//! (commit `4e8a736`, ntHash v2.3.0), reformatted for idiomatic Rust.  All tables
//! and constants were generated by the original authors and **must not be
//! modified** unless you are intentionally changing the hash function.
//!
//! The contents include:
//! - Random 64‑bit seeds for each nucleotide (A, C, G, T, N).  
//! - Constants governing hash extension (`MULTISEED`, `MULTISHIFT`).  
//! - Split‑rotate lookup tables for 31‑ and 33‑bit halves.  
//! - Pre‑hashed dimer/trimer/tetramer tables.  
//! - ASCII → nucleotide index and reverse‑complement index tables.  
//!
//! These tables drive all of ntHash’s core operations without runtime
//! branching.

/// Number of ASCII codes.
pub const ASCII_SIZE: usize = 256;

//==============================================================================
// 64‑bit random seeds for each base.
//==============================================================================

/// Seed for Adenine (A/a).
pub const SEED_A: u64 = 0x3c8b_fbb3_95c6_0474;
/// Seed for Cytosine (C/c).
pub const SEED_C: u64 = 0x3193_c185_62a0_2b4c;
/// Seed for Guanine (G/g).
pub const SEED_G: u64 = 0x2032_3ed0_8257_2324;
/// Seed for Thymine (T/t).
pub const SEED_T: u64 = 0x2955_49f5_4be2_4456;
/// Ambiguous base (N or any other) → contributes zero to every hash.
pub const SEED_N: u64 = 0;

/// ASCII XOR offset to convert a base to its complement in ASCII:
/// (`A ↔ T`, `C ↔ G`).
pub const CP_OFF: u8 = 0x07;

//==============================================================================
// Parameters for hash extension (derive multiple hashes per k‑mer).
//==============================================================================

/// Right‑shift amount applied after multiplicative mix.
pub const MULTISHIFT: u32 = 27;
/// Constant multiplier used in extra‑hash mixing.
pub const MULTISEED: u64 = 0x90b4_5d39_fb6d_a1fa;

//==============================================================================
// Split‑rotate tables for 31‑bit and 33‑bit halves.
//==============================================================================
//
// For each nucleotide (A/C/G/T/N), we store two precomputed tables:
// - MS_TAB_33R: 33‑bit right‑half rotations (indices 0–32).
// - MS_TAB_31L: 31‑bit left‑half rotations (indices 0–30).
//
// The ASCII arrays below simply point into those five real tables.

/// 33‑bit right‐half split‐rotate for A/a.
pub const A33R: [u64; 33] = [
    0x0000_0001_95c6_0474,
    0x0000_0001_2b8c_08e9,
    0x0000_0000_5718_11d3,
    0x0000_0000_ae30_23a6,
    0x0000_0001_5c60_474c,
    0x0000_0000_b8c0_8e99,
    0x0000_0001_7181_1d32,
    0x0000_0000_e302_3a65,
    0x0000_0001_c604_74ca,
    0x0000_0001_8c08_e995,
    0x0000_0001_1811_d32b,
    0x0000_0000_3023_a657,
    0x0000_0000_6047_4cae,
    0x0000_0000_c08e_995c,
    0x0000_0001_811d_32b8,
    0x0000_0001_023a_6571,
    0x0000_0000_0474_cae3,
    0x0000_0000_08e9_95c6,
    0x0000_0000_11d3_2b8c,
    0x0000_0000_23a6_5718,
    0x0000_0000_474c_ae30,
    0x0000_0000_8e99_5c60,
    0x0000_0001_1d32_b8c0,
    0x0000_0000_3a65_7181,
    0x0000_0000_74ca_e302,
    0x0000_0000_e995_c604,
    0x0000_0001_d32b_8c08,
    0x0000_0001_a657_1811,
    0x0000_0001_4cae_3023,
    0x0000_0000_995c_6047,
    0x0000_0001_32b8_c08e,
    0x0000_0000_6571_811d,
    0x0000_0000_cae3_023a,
];

/// 31‑bit left‑half split‑rotate for A/a.
pub const A31L: [u64; 31] = [
    0x3c8b_fbb2_0000_0000,
    0x7917_f764_0000_0000,
    0xf22f_eec8_0000_0000,
    0xe45f_dd92_0000_0000,
    0xc8bf_bb26_0000_0000,
    0x917f_764e_0000_0000,
    0x22fe_ec9e_0000_0000,
    0x45fd_d93c_0000_0000,
    0x8bfb_b278_0000_0000,
    0x17f7_64f2_0000_0000,
    0x2fee_c9e4_0000_0000,
    0x5fdd_93c8_0000_0000,
    0xbfbb_2790_0000_0000,
    0x7f76_4f22_0000_0000,
    0xfeec_9e44_0000_0000,
    0xfdd9_3c8a_0000_0000,
    0xfbb2_7916_0000_0000,
    0xf764_f22e_0000_0000,
    0xeec9_e45e_0000_0000,
    0xdd93_c8be_0000_0000,
    0xbb27_917e_0000_0000,
    0x764f_22fe_0000_0000,
    0xec9e_45fc_0000_0000,
    0xd93c_8bfa_0000_0000,
    0xb279_17f6_0000_0000,
    0x64f2_2fee_0000_0000,
    0xc9e4_5fdc_0000_0000,
    0x93c8_bfba_0000_0000,
    0x2791_7f76_0000_0000,
    0x4f22_feec_0000_0000,
    0x9e45_fdd8_0000_0000,
];

/// 33‑bit right‐half split‑rotate for C/c.
pub const C33R: [u64; 33] = [
    0x0000_0001_62a0_2b4c,
    0x0000_0000_c540_5699,
    0x0000_0001_8a80_ad32,
    0x0000_0001_1501_5a65,
    0x0000_0000_2a02_b4cb,
    0x0000_0000_5405_6996,
    0x0000_0000_a80a_d32c,
    0x0000_0001_5015_a658,
    0x0000_0000_a02b_4cb1,
    0x0000_0001_4056_9962,
    0x0000_0000_80ad_32c5,
    0x0000_0001_015a_658a,
    0x0000_0000_02b4_cb15,
    0x0000_0000_0569_962a,
    0x0000_0000_0ad3_2c54,
    0x0000_0000_15a6_58a8,
    0x0000_0000_2b4c_b150,
    0x0000_0000_5699_62a0,
    0x0000_0000_ad32_c540,
    0x0000_0001_5a65_8a80,
    0x0000_0000_b4cb_1501,
    0x0000_0001_6996_2a02,
    0x0000_0000_d32c_5405,
    0x0000_0001_a658_a80a,
    0x0000_0001_4cb1_5015,
    0x0000_0000_9962_a02b,
    0x0000_0001_32c5_4056,
    0x0000_0000_658a_80ad,
    0x0000_0000_cb15_015a,
    0x0000_0001_962a_02b4,
    0x0000_0001_2c54_0569,
    0x0000_0000_58a8_0ad3,
    0x0000_0000_b150_15a6,
];
/// 31‑bit left‑half split‑rotate for C/c.
pub const C31L: [u64; 31] = [
    0x3193_c184_0000_0000,
    0x6327_8308_0000_0000,
    0xc64f_0610_0000_0000,
    0x8c9e_0c22_0000_0000,
    0x193c_1846_0000_0000,
    0x3278_308c_0000_0000,
    0x64f0_6118_0000_0000,
    0xc9e0_c230_0000_0000,
    0x93c1_8462_0000_0000,
    0x2783_08c6_0000_0000,
    0x4f06_118c_0000_0000,
    0x9e0c_2318_0000_0000,
    0x3c18_4632_0000_0000,
    0x7830_8c64_0000_0000,
    0xf061_18c8_0000_0000,
    0xe0c2_3192_0000_0000,
    0xc184_6326_0000_0000,
    0x8308_c64e_0000_0000,
    0x0611_8c9e_0000_0000,
    0x0c23_193c_0000_0000,
    0x1846_3278_0000_0000,
    0x308c_64f0_0000_0000,
    0x6118_c9e0_0000_0000,
    0xc231_93c0_0000_0000,
    0x8463_2782_0000_0000,
    0x08c6_4f06_0000_0000,
    0x118c_9e0c_0000_0000,
    0x2319_3c18_0000_0000,
    0x4632_7830_0000_0000,
    0x8c64_f060_0000_0000,
    0x18c9_e0c2_0000_0000,
];

/// 33‑bit right‑half split‑rotate for G/g.
pub const G33R: [u64; 33] = [
    0x0000_0000_8257_2324,
    0x0000_0001_04ae_4648,
    0x0000_0000_095c_8c91,
    0x0000_0000_12b9_1922,
    0x0000_0000_2572_3244,
    0x0000_0000_4ae4_6488,
    0x0000_0000_95c8_c910,
    0x0000_0001_2b91_9220,
    0x0000_0000_5723_2441,
    0x0000_0000_ae46_4882,
    0x0000_0001_5c8c_9104,
    0x0000_0000_b919_2209,
    0x0000_0001_7232_4412,
    0x0000_0000_e464_8825,
    0x0000_0001_c8c9_104a,
    0x0000_0001_9192_2095,
    0x0000_0001_2324_412b,
    0x0000_0000_4648_8257,
    0x0000_0000_8c91_04ae,
    0x0000_0001_1922_095c,
    0x0000_0000_3244_12b9,
    0x0000_0000_6488_2572,
    0x0000_0000_c910_4ae4,
    0x0000_0001_9220_95c8,
    0x0000_0001_2441_2b91,
    0x0000_0000_4882_5723,
    0x0000_0000_9104_ae46,
    0x0000_0001_2209_5c8c,
    0x0000_0000_4412_b919,
    0x0000_0000_8825_7232,
    0x0000_0001_104a_e464,
    0x0000_0000_2095_c8c9,
    0x0000_0000_412b_9192,
];
/// 31‑bit left‑half split‑rotate for G/g.
pub const G31L: [u64; 31] = [
    0x2032_3ed0_0000_0000,
    0x4064_7da0_0000_0000,
    0x80c8_fb40_0000_0000,
    0x0191_f682_0000_0000,
    0x0323_ed04_0000_0000,
    0x0647_da08_0000_0000,
    0x0c8f_b410_0000_0000,
    0x191f_6820_0000_0000,
    0x323e_d040_0000_0000,
    0x647d_a080_0000_0000,
    0xc8fb_4100_0000_0000,
    0x91f6_8202_0000_0000,
    0x23ed_0406_0000_0000,
    0x47da_080c_0000_0000,
    0x8fb4_1018_0000_0000,
    0x1f68_2032_0000_0000,
    0x3ed0_4064_0000_0000,
    0x7da0_80c8_0000_0000,
    0xfb41_0190_0000_0000,
    0xf682_0322_0000_0000,
    0xed04_0646_0000_0000,
    0xda08_0c8e_0000_0000,
    0xb410_191e_0000_0000,
    0x6820_323e_0000_0000,
    0xd040_647c_0000_0000,
    0xa080_c8fa_0000_0000,
    0x4101_91f6_0000_0000,
    0x8203_23ec_0000_0000,
    0x0406_47da_0000_0000,
    0x080c_8fb4_0000_0000,
    0x1019_1f68_0000_0000,
];

/// 33‑bit right‑half split‑rotate for T/t.
pub const T33R: [u64; 33] = [
    0x0000_0001_4be2_4456,
    0x0000_0000_97c4_88ad,
    0x0000_0001_2f89_115a,
    0x0000_0000_5f12_22b5,
    0x0000_0000_be24_456a,
    0x0000_0001_7c48_8ad4,
    0x0000_0000_f891_15a9,
    0x0000_0001_f122_2b52,
    0x0000_0001_e244_56a5,
    0x0000_0001_c488_ad4b,
    0x0000_0001_8911_5a97,
    0x0000_0001_1222_b52f,
    0x0000_0000_2445_6a5f,
    0x0000_0000_488a_d4be,
    0x0000_0000_9115_a97c,
    0x0000_0001_222b_52f8,
    0x0000_0000_4456_a5f1,
    0x0000_0000_88ad_4be2,
    0x0000_0001_115a_97c4,
    0x0000_0000_22b5_2f89,
    0x0000_0000_456a_5f12,
    0x0000_0000_8ad4_be24,
    0x0000_0001_15a9_7c48,
    0x0000_0000_2b52_f891,
    0x0000_0000_56a5_f122,
    0x0000_0000_ad4b_e244,
    0x0000_0001_5a97_c488,
    0x0000_0000_b52f_8911,
    0x0000_0001_6a5f_1222,
    0x0000_0000_d4be_2445,
    0x0000_0001_a97c_488a,
    0x0000_0001_52f8_9115,
    0x0000_0000_a5f1_222b,
];

/// 31‑bit left‑half split‑rotate for T/t.
pub const T31L: [u64; 31] = [
    0x2955_49f4_0000_0000,
    0x52aa_93e8_0000_0000,
    0xa555_27d0_0000_0000,
    0x4aaa_4fa2_0000_0000,
    0x9554_9f44_0000_0000,
    0x2aa9_3e8a_0000_0000,
    0x5552_7d14_0000_0000,
    0xaaa4_fa28_0000_0000,
    0x5549_f452_0000_0000,
    0xaa93_e8a4_0000_0000,
    0x5527_d14a_0000_0000,
    0xaa4f_a294_0000_0000,
    0x549f_452a_0000_0000,
    0xa93e_8a54_0000_0000,
    0x527d_14aa_0000_0000,
    0xa4fa_2954_0000_0000,
    0x49f4_52aa_0000_0000,
    0x93e8_a554_0000_0000,
    0x27d1_4aaa_0000_0000,
    0x4fa2_9554_0000_0000,
    0x9f45_2aa8_0000_0000,
    0x3e8a_5552_0000_0000,
    0x7d14_aaa4_0000_0000,
    0xfa29_5548_0000_0000,
    0xf452_aa92_0000_0000,
    0xe8a5_5526_0000_0000,
    0xd14a_aa4e_0000_0000,
    0xa295_549e_0000_0000,
    0x452a_a93e_0000_0000,
    0x8a55_527c_0000_0000,
    0x14aa_a4fa_0000_0000,
];

/// Default tables of SEED_N for any invalid ASCII code.
pub const N33R: [u64; 33] = [SEED_N; 33];
pub const N31L: [u64; 31] = [SEED_N; 31];

//==============================================================================
// Build ASCII‐indexed split‑rotate tables via const fns.
//==============================================================================

/// Build the 31‑bit rotation table array for all ASCII codes.
const fn build_tab31() -> [&'static [u64; 31]; ASCII_SIZE] {
    let mut t = [&N31L; ASCII_SIZE];
    // Map ASCII A/a, C/c, G/g, T/t to their tables
    t[b'A' as usize] = &A31L;
    t[b'a' as usize] = &A31L;
    t[b'C' as usize] = &C31L;
    t[b'c' as usize] = &C31L;
    t[b'G' as usize] = &G31L;
    t[b'g' as usize] = &G31L;
    t[b'T' as usize] = &T31L;
    t[b't' as usize] = &T31L;
    // Also map RNA base U/u → T
    t[b'U' as usize] = &T31L;
    t[b'u' as usize] = &T31L;
    // Also populate entries for (char & CP_OFF)
    t[1] = &T31L; // 'A' & 7 = 1 → T
    t[3] = &G31L; // 'C' & 7 = 3 → G
    t[4] = &A31L; // 'T' & 7 = 4 → A
    t[5] = &A31L; // 'U' & 7 = 5 → A  (RNA support)
    t[7] = &C31L; // 'G' & 7 = 7 → C
    t
}
/// Final 31‑bit split‑rotate lookup table.
pub const MS_TAB_31L: [&'static [u64; 31]; ASCII_SIZE] = build_tab31();

/// Build the 33‑bit rotation table array for all ASCII codes.
const fn build_tab33() -> [&'static [u64; 33]; ASCII_SIZE] {
    let mut t = [&N33R; ASCII_SIZE];
    t[b'A' as usize] = &A33R;
    t[b'a' as usize] = &A33R;
    t[b'C' as usize] = &C33R;
    t[b'c' as usize] = &C33R;
    t[b'G' as usize] = &G33R;
    t[b'g' as usize] = &G33R;
    t[b'T' as usize] = &T33R;
    t[b't' as usize] = &T33R;
    // RNA U/u → T
    t[b'U' as usize] = &T33R;
    t[b'u' as usize] = &T33R;
    // CP_OFF mask entries
    t[1] = &T33R; // 'A' & 7 = 1 → T
    t[3] = &G33R; // 'C' & 7 = 3 → G
    t[4] = &A33R; // 'T' & 7 = 4 → A
    t[5] = &A33R; // 'U' & 7 = 5 → A  (RNA support)
    t[7] = &C33R; // 'G' & 7 = 7 → C
    t
}
/// Final 33‑bit split‑rotate lookup table.
pub const MS_TAB_33R: [&'static [u64; 33]; ASCII_SIZE] = build_tab33();

//==============================================================================
// Pre‑hashed tables for small k‑mers (2‑,3‑,4‑mers).
//==============================================================================

/// Precomputed random hashes for all dimers (size 2).
pub const DIMER_TAB: [u64; 16] = [
    0x459c_0cd6_be4a_0c9d,
    0x4884_36e0_492c_23a5,
    0x5925_c9b5_a9db_2bcd,
    0x5042_be90_606e_4cbf,
    0x5fac_78bb_5086_52ed,
    0x52b4_428d_a7e0_7dd5,
    0x4315_bdd8_4717_75bd,
    0x4a72_cafd_8ea2_12cf,
    0x7cef_8612_9168_423c,
    0x71f7_bc24_660e_6d04,
    0x6056_4371_86f9_656c,
    0x6931_3454_4f4c_021e,
    0x6e21_685b_0202_8cd9,
    0x6339_526d_f564_a3e1,
    0x7298_ad38_1593_ab89,
    0x7bff_da1d_dc26_ccfb,
];

/// Precomputed random hashes for all trimers (size 3).
pub const TRIMER_TAB: [u64; 64] = [
    0xb7b3_e21e_e952_1d4e,
    0xbaab_d828_1e34_3276,
    0xab0a_277d_fec3_3a1e,
    0xa26d_5058_3776_5d6c,
    0xad83_9673_079e_433e,
    0xa09b_ac45_f0f8_6c06,
    0xb13a_5310_100f_646e,
    0xb85d_2435_d9ba_031c,
    0x8ec0_68da_c670_53ef,
    0x83d8_52ec_3116_7cd7,
    0x9279_adb9_d1e1_74bf,
    0x9b1e_da9c_1854_13cd,
    0x9c0e_8693_551a_9d0a,
    0x9116_bca5_a27c_b232,
    0x80b7_43f0_428b_ba5a,
    0x89d0_34d5_8b3e_dd28,
    0x83d3_0ac7_34ca_a1af,
    0x8ecb_30f1_c3ac_8e97,
    0x9f6a_cfa4_235b_86ff,
    0x960d_b881_eaee_e18d,
    0x99e3_7eaa_da06_ffdf,
    0x94fb_449c_2d60_d0e7,
    0x855a_bbc9_cd97_d88f,
    0x8c3d_ccec_0422_bffd,
    0xbaa0_8003_1be8_ef0e,
    0xb7b8_ba35_ec8e_c036,
    0xa619_4560_0c79_c85e,
    0xaf7e_3245_c5cc_af2c,
    0xa86e_6e4a_8882_21eb,
    0xa576_547c_7fe4_0ed3,
    0xb4d7_ab29_9f13_06bb,
    0xbdb0_dc0c_56a6_61c9,
    0xc554_f796_b716_800c,
    0xc84c_cda0_4070_af34,
    0xd9ed_32f5_a087_a75c,
    0xd08a_45d0_6932_c02e,
    0xdf64_83fb_59da_de7c,
    0xd27c_b9cd_aebc_f144,
    0xc3dd_4698_4e4b_f92c,
    0xcaba_31bd_87fe_9e5e,
    0xfc27_7d52_9834_cead,
    0xf13f_4764_6f52_e195,
    0xe09e_b831_8fa5_e9fd,
    0xe9f9_cf14_4610_8e8f,
    0xeee9_931b_0b5e_0048,
    0xe3f1_a92d_fc38_2f70,
    0xf250_5678_1ccf_2718,
    0xfb37_215d_d57a_406a,
    0xe0c9_2b07_91c3_1dc7,
    0xedd1_1131_66a5_32ff,
    0xfc70_ee64_8652_3a97,
    0xf517_9941_4fe7_5de5,
    0xfaf9_5f6a_7f0f_43b7,
    0xf7e1_655c_8869_6c8f,
    0xe640_9a09_689e_64e7,
    0xef27_ed2c_a12b_0395,
    0xd9ba_a1c3_bee1_5366,
    0xd4a2_9bf5_4987_7c5e,
    0xc503_64a0_a970_7436,
    0xcc64_1385_60c5_1344,
    0xcb74_4f8a_2d8b_9d83,
    0xc66c_75bc_daed_b2bb,
    0xd7cd_8ae9_3a1a_bad3,
    0xdeaa_fdcc_f3af_dda1,
];

/// Precomputed random hashes for all tetramers (size 4).
pub const TETRAMER_TAB: [u64; 256] = [
    0x53ec_3f8c_4762_3ee8,
    0x5ef4_05ba_b004_11d0,
    0x4f55_faef_50f3_19b8,
    0x4632_8dca_9946_7eca,
    0x49dc_4be1_a9ae_6098,
    0x44c4_71d7_5ec8_4fa0,
    0x5565_8e82_be3f_47c8,
    0x5c02_f9a7_778a_20ba,
    0x6a9f_b548_6840_7049,
    0x6787_8f7e_9f26_5f71,
    0x7626_702b_7fd1_5719,
    0x7f41_070e_b664_306b,
    0x7851_5b01_fb2a_beac,
    0x7549_6137_0c4c_9194,
    0x64e8_9e62_ecbb_99fc,
    0x6d8f_e947_250e_fe8e,
    0x678c_d755_9afa_8209,
    0x6a94_ed63_6d9c_ad31,
    0x7b35_1236_8d6b_a559,
    0x7252_6513_44de_c22b,
    0x7dbc_a338_7436_dc79,
    0x70a4_990e_8350_f341,
    0x6105_665b_63a7_fb29,
    0x6862_117e_aa12_9c5b,
    0x5eff_5d91_b5d8_cca8,
    0x53e7_67a7_42be_e390,
    0x4246_98f2_a249_ebf8,
    0x4b21_efd7_6bfc_8c8a,
    0x4c31_b3d8_26b2_024d,
    0x4129_89ee_d1d4_2d75,
    0x5088_76bb_3123_251d,
    0x59ef_019e_f896_426f,
    0x210b_2a04_1926_a3aa,
    0x2c13_1032_ee40_8c92,
    0x3db2_ef67_0eb7_84fa,
    0x34d5_9842_c702_e388,
    0x3b3b_5e69_f7ea_fdda,
    0x3623_645f_008c_d2e2,
    0x2782_9b0a_e07b_da8a,
    0x2ee5_ec2f_29ce_bdf8,
    0x1878_a0c0_3604_ed0b,
    0x1560_9af6_c162_c233,
    0x04c1_65a3_2195_ca5b,
    0x0da6_1286_e820_ad29,
    0x0ab6_4e89_a56e_23ee,
    0x07ae_74bf_5208_0cd6,
    0x160f_8bea_b2ff_04be,
    0x1f68_fccf_7b4a_63cc,
    0x0496_f695_3ff3_3e61,
    0x098e_cca3_c895_1159,
    0x182f_33f6_2862_1931,
    0x1148_44d3_e1d7_7e43,
    0x1ea6_82f8_d13f_6011,
    0x13be_b8ce_2659_4f29,
    0x021f_479b_c6ae_4741,
    0x0b78_30be_0f1b_2033,
    0x3de5_7c51_10d1_70c0,
    0x30fd_4667_e7b7_5ff8,
    0x215c_b932_0740_5790,
    0x283b_ce17_cef5_30e2,
    0x2f2b_9218_83bb_be25,
    0x2233_a82e_74dd_911d,
    0x3392_577b_942a_9975,
    0x3af5_205e_5d9f_fe07,
    0x3b2d_ee3d_fc53_472b,
    0x3635_d40b_0b35_6813,
    0x2794_2b5e_ebc2_607b,
    0x2ef3_5c7b_2277_0709,
    0x211d_9a50_129f_195b,
    0x2c05_a066_e5f9_3663,
    0x3da4_5f33_050e_3e0b,
    0x34c3_2816_ccbb_5979,
    0x025e_64f9_d371_098a,
    0x0f46_5ecf_2417_26b2,
    0x1ee7_a19a_c4e0_2eda,
    0x1780_d6bf_0d55_49a8,
    0x1090_8ab0_401b_c76f,
    0x1d88_b086_b77d_e857,
    0x0c29_4fd3_578a_e03f,
    0x054e_38f6_9e3f_874d,
    0x0f4d_06e4_21cb_fbca,
    0x0255_3cd2_d6ad_d4f2,
    0x13f4_c387_365a_dc9a,
    0x1a93_b4a2_ffef_bbe8,
    0x157d_7289_cf07_a5ba,
    0x1865_48bf_3861_8a82,
    0x09c4_b7ea_d896_82ea,
    0x00a3_c0cf_1123_e598,
    0x363e_8c20_0ee9_b56b,
    0x3b26_b616_f98f_9a53,
    0x2a87_4943_1978_923b,
    0x23e0_3e66_d0cd_f549,
    0x24f0_6269_9d83_7b8e,
    0x29e8_585f_6ae5_54b6,
    0x3849_a70a_8a12_5cde,
    0x312e_d02f_43a7_3bac,
    0x49ca_fbb5_a217_da69,
    0x44d2_c183_5571_f551,
    0x5573_3ed6_b586_fd39,
    0x5c14_49f3_7c33_9a4b,
    0x53fa_8fd8_4cdb_8419,
    0x5ee2_b5ee_bbbd_ab21,
    0x4f43_4abb_5b4a_a349,
    0x4624_3d9e_92ff_c43b,
    0x70b9_7171_8d35_94c8,
    0x7da1_4b47_7a53_bbf0,
    0x6c00_b412_9aa4_b398,
    0x6567_c337_5311_d4ea,
    0x6277_9f38_1e5f_5a2d,
    0x6f6f_a50e_e939_7515,
    0x7ece_5a5b_09ce_7d7d,
    0x77a9_2d7e_c07b_1a0f,
    0x6c57_2724_84c2_47a2,
    0x614f_1d12_73a4_689a,
    0x70ee_e247_9353_60f2,
    0x7989_9562_5ae6_0780,
    0x7667_5349_6a0e_19d2,
    0x7b7f_697f_9d68_36ea,
    0x6ade_962a_7d9f_3e82,
    0x63b9_e10f_b42a_59f0,
    0x5524_ade0_abe0_0903,
    0x583c_97d6_5c86_263b,
    0x499d_6883_bc71_2e53,
    0x40fa_1fa6_75c4_4921,
    0x47ea_43a9_388a_c7e6,
    0x4af2_799f_cfec_e8de,
    0x5b53_86ca_2f1b_e0b6,
    0x5234_f1ef_e6ae_87c4,
    0xb622_149c_fbeb_046c,
    0xbb3a_2eaa_0c8d_2b54,
    0xaa9b_d1ff_ec7a_233c,
    0xa3fc_a6da_25cf_444e,
    0xac12_60f1_1527_5a1c,
    0xa10a_5ac7_e241_7524,
    0xb0ab_a592_02b6_7d4c,
    0xb9cc_d2b7_cb03_1a3e,
    0x8f51_9e58_d4c9_4acd,
    0x8249_a46e_23af_65f5,
    0x93e8_5b3b_c358_6d9d,
    0x9a8f_2c1e_0aed_0aef,
    0x9d9f_7011_47a3_8428,
    0x9087_4a27_b0c5_ab10,
    0x8126_b572_5032_a378,
    0x8841_c257_9987_c40a,
    0x8242_fc45_2673_b88d,
    0x8f5a_c673_d115_97b5,
    0x9efb_3926_31e2_9fdd,
    0x979c_4e03_f857_f8af,
    0x9872_8828_c8bf_e6fd,
    0x956a_b21e_3fd9_c9c5,
    0x84cb_4d4b_df2e_c1ad,
    0x8dac_3a6e_169b_a6df,
    0xbb31_7681_0951_f62c,
    0xb629_4cb7_fe37_d914,
    0xa788_b3e2_1ec0_d17c,
    0xaeef_c4c7_d775_b60e,
    0xa9ff_98c8_9a3b_38c9,
    0xa4e7_a2fe_6d5d_17f1,
    0xb546_5dab_8daa_1f99,
    0xbc21_2a8e_441f_78eb,
    0xc4c5_0114_a5af_992e,
    0xc9dd_3b22_52c9_b616,
    0xd87c_c477_b23e_be7e,
    0xd11b_b352_7b8b_d90c,
    0xdef5_7579_4b63_c75e,
    0xd3ed_4f4f_bc05_e866,
    0xc24c_b01a_5cf2_e00e,
    0xcb2b_c73f_9547_877c,
    0xfdb6_8bd0_8a8d_d78f,
    0xf0ae_b1e6_7deb_f8b7,
    0xe10f_4eb3_9d1c_f0df,
    0xe868_3996_54a9_97ad,
    0xef78_6599_19e7_196a,
    0xe260_5faf_ee81_3652,
    0xf3c1_a0fa_0e76_3e3a,
    0xfaa6_d7df_c7c3_5948,
    0xe158_dd85_837a_04e5,
    0xec40_e7b3_741c_2bdd,
    0xfde1_18e6_94eb_23b5,
    0xf486_6fc3_5d5e_44c7,
    0xfb68_a9e8_6db6_5a95,
    0xf670_93de_9ad0_75ad,
    0xe7d1_6c8b_7a27_7dc5,
    0xeeb6_1bae_b392_1ab7,
    0xd82b_5741_ac58_4a44,
    0xd533_6d77_5b3e_657c,
    0xc492_9222_bbc9_6d14,
    0xcdf5_e507_727c_0a66,
    0xcae5_b908_3f32_84a1,
    0xc7fd_833e_c854_ab99,
    0xd65c_7c6b_28a3_a3f1,
    0xdf3b_0b4e_e116_c483,
    0xfd19_adbc_b640_3ffb,
    0xf001_978a_4126_10c3,
    0xe1a0_68df_a1d1_18ab,
    0xe8c7_1ffa_6864_7fd9,
    0xe729_d9d1_588c_618b,
    0xea31_e3e7_afea_4eb3,
    0xfb90_1cb2_4f1d_46db,
    0xf2f7_6b97_86a8_21a9,
    0xc46a_2778_9962_715a,
    0xc972_1d4e_6e04_5e62,
    0xd8d3_e21b_8ef3_560a,
    0xd1b4_953e_4746_3178,
    0xd6a4_c931_0a08_bfbf,
    0xdbbc_f307_fd6e_9087,
    0xca1d_0c52_1d99_98ef,
    0xc37a_7b77_d42c_ff9d,
    0xc979_4565_6bd8_831a,
    0xc461_7f53_9cbe_ac22,
    0xd5c0_8006_7c49_a44a,
    0xdca7_f723_b5fc_c338,
    0xd349_3108_8514_dd6a,
    0xde51_0b3e_7272_f252,
    0xcff0_f46b_9285_fa3a,
    0xc697_834e_5b30_9d48,
    0xf00a_cfa1_44fa_cdbb,
    0xfd12_f597_b39c_e283,
    0xecb3_0ac2_536b_eaeb,
    0xe5d4_7de7_9ade_8d99,
    0xe2c4_21e8_d790_035e,
    0xefdc_1bde_20f6_2c66,
    0xfe7d_e48b_c001_240e,
    0xf71a_93ae_09b4_437c,
    0x8ffe_b834_e804_a2b9,
    0x82e6_8202_1f62_8d81,
    0x9347_7d57_ff95_85e9,
    0x9a20_0a72_3620_e29b,
    0x95ce_cc59_06c8_fcc9,
    0x98d6_f66f_f1ae_d3f1,
    0x8977_093a_1159_db99,
    0x8010_7e1f_d8ec_bceb,
    0xb68d_32f0_c726_ec18,
    0xbb95_08c6_3040_c320,
    0xaa34_f793_d0b7_cb48,
    0xa353_80b6_1902_ac3a,
    0xa443_dcb9_544c_22fd,
    0xa95b_e68f_a32a_0dc5,
    0xb8fa_19da_43dd_05ad,
    0xb19d_6eff_8a68_62df,
    0xaa63_64a5_ced1_3f72,
    0xa77b_5e93_39b7_104a,
    0xb6da_a1c6_d940_1822,
    0xbfbd_d6e3_10f5_7f50,
    0xb053_10c8_201d_6102,
    0xbd4b_2afe_d77b_4e3a,
    0xacea_d5ab_378c_4652,
    0xa58d_a28e_fe39_2120,
    0x9310_ee61_e1f3_71d3,
    0x9e08_d457_1695_5eeb,
    0x8fa9_2b02_f662_5683,
    0x86ce_5c27_3fd7_31f1,
    0x81de_0028_7299_bf36,
    0x8cc6_3a1e_85ff_900e,
    0x9d67_c54b_6508_9866,
    0x9400_b26e_acbd_ff14,    
];

//==============================================================================
// ASCII → nucleotide index and reverse‑complement index tables.
//==============================================================================

const XX: u8 = 255;

/// ASCII → nucleotide index (A=0, C=1, G=2, T/U=3 others=255).
pub const CONVERT_TAB: [u8; ASCII_SIZE] = {
    let mut t = [XX; ASCII_SIZE];
    // DNA bases
    t[b'A' as usize] = 0;
    t[b'a' as usize] = 0;
    t[b'C' as usize] = 1;
    t[b'c' as usize] = 1;
    t[b'G' as usize] = 2;
    t[b'g' as usize] = 2;
    t[b'T' as usize] = 3;
    t[b't' as usize] = 3;
    // also map RNA U → T
    t[b'U' as usize] = 3;
    t[b'u' as usize] = 3;
    t
};

/// ASCII → reverse‑complement index (A→3, C→2, G→1, T/U→0, others=255).
pub const RC_CONVERT_TAB: [u8; ASCII_SIZE] = {
    let mut t = [XX; ASCII_SIZE];
    // DNA bases
    t[b'A' as usize] = 3;
    t[b'a' as usize] = 3;
    t[b'T' as usize] = 0;
    t[b't' as usize] = 0;
    t[b'C' as usize] = 2;
    t[b'c' as usize] = 2;
    t[b'G' as usize] = 1;
    t[b'g' as usize] = 1;
    // also map RNA U → A (same as T → A)
    t[b'U' as usize] = 0;
    t[b'u' as usize] = 0;
    t
};

/// Build the SEED_TAB mapping ASCII → 64‑bit seed, treating invalid codes
/// as SEED_N (zero).
const fn build_seed_tab() -> [u64; ASCII_SIZE] {
    let mut t = [SEED_N; ASCII_SIZE];
    // Map A, C, G, T (upper/lower) to their seeds
    t[b'A' as usize] = SEED_A;
    t[b'a' as usize] = SEED_A;
    t[b'C' as usize] = SEED_C;
    t[b'c' as usize] = SEED_C;
    t[b'G' as usize] = SEED_G;
    t[b'g' as usize] = SEED_G;
    t[b'T' as usize] = SEED_T;
    t[b't' as usize] = SEED_T;
    // Also fill in for ASCII & CP_OFF (complements)
    t[1] = SEED_T; // 'A' & 7 = 1 → T
    t[3] = SEED_G; // 'C' & 7 = 3 → G
    t[4] = SEED_A; // 'T' & 7 = 4 → A
    t[7] = SEED_C; // 'G' & 7 = 7 → C
    t
}

/// ASCII → 64‑bit seed lookup table (A/C/G/T/N).
pub const SEED_TAB: [u64; ASCII_SIZE] = build_seed_tab();
